package tp1.ej7;

import java.util.LinkedList;
import java.util.List;

// 7d)

public class ListasEstudiantes {
	// Clase local estudioooo estudioooo
	public static class Estudiante {
		private String nombre;
		private String legajo;
		
		// Albañil (constructor)
		public Estudiante(String nombre, String legajo) {
			this.nombre = nombre;
			this.legajo = legajo;
		}
		
		// Gtrs & Strs
		public String getNombre() {return nombre;}
		public void setNombre(String nombre) {this.nombre = nombre;}
		public String getLegajo() {return legajo;}
		public void setLegajo(String legajo) {this.legajo = legajo;}
		
		// Hacelo un textooo...
		@Override
		public String toString() {
			return "Estudiante [nombre=" + nombre + ", legajo=" + legajo + "]";
		}
	}
	
	public static boolean agregarEstudiante (LinkedList <Estudiante> l, Estudiante e) {
		boolean agregué = false;
		
		if(!l.contains(e)) {
			l.add(e);
			agregué = true;
		}
		
		return agregué;
	}
	
	public static boolean esCapicúa(List<Integer> l) {
		
		Integer inicio = l.getFirst();
		Integer fin = l.getLast();
		
		while (inicio < fin) {
			if (inicio != fin) {
				return false;
			}
			inicio++;
			fin--;
		}
		
		return true;
	}
	
	public static List<Integer> collatz (Integer n, List<Integer> l) {
		if (n == 1) return l;
		else {
			if (n % 2 == 0) {
				n = n / 2;
			}
			else {
				n = 3 * n + 1;
			}
			l.add(n);
			collatz(n, l);
		}
	}
	
	public static void main (String [] args ) {
		// donde ocurre la magia
		
		// i. lista con 3 estudiantes
		LinkedList<Estudiante> listaEstudiantes = new LinkedList<>();
		
		listaEstudiantes.add(new Estudiante("Ana", "23557(3"));
		listaEstudiantes.add(new Estudiante("Benicio", "21374/1"));
		listaEstudiantes.add(new Estudiante("Carolina", "18222/2"));
		
		// ii. generar copia
		/* Existen dos tipos de copias de listas en Java: shallow y deep.
		 * 
		 * Una shallow copy crea una nueva estructura de datos, pero solo copia las referencias a los objetos internos. 
		 * Las modificaciones en los objetos de la lista copiada afectan a la lista original porque ambas listas comparten 
		 * los mismos objetos.
		 * 
		 * Una deep copy crea una nueva estructura de datos y también copia los objetos internos. 
		 * Las listas copiada y original son independientes, por lo que los cambios en los objetos de una no afectan a la otra.
		 */
		
		// Ahora sí, basta de cháchara. Vamos a copiar. Ahí va una shallow.
		LinkedList<Estudiante> shallow = (LinkedList<Estudiante>)listaEstudiantes.clone();
		// Esta advertencia surge porque en tiempo de ejecución la referencia a los genéricos se borra
		// entonces el compilador no te va a poder garantizar que el objeto con el que vas a operar es
		// con el que vos pretendés. Y como Estudiante es un genérico...
		// "Mirá flaco que si se rompe algo... Yo no tengo nada que ver"
		
		// Esto es deep copy.
		LinkedList<Estudiante> deep = new LinkedList<>();
		for (Estudiante e : listaEstudiantes) {
		    deep.add(e);
		}
		
		// iii. imprimir contenidos de original y copias
		System.out.println(listaEstudiantes);
		System.out.println(shallow);
		System.out.println(deep);
		
		// iv. modificar datos
		listaEstudiantes.get(1).setNombre("Patricio");
		shallow.get(0).setNombre("Ana Banana");
		deep.get(2).setNombre("Saturnina");
		
		// v. imprimir de nuevo
		System.out.println(listaEstudiantes); // Imprime Ana, Patricio, Carolina
		System.out.println(shallow); // Imprime Ana Banana, Patricio, Carolina
		System.out.println(deep); // Imprime Ana, Benicio, Saturnina
		
		// joder con listaEstudiantes y shallow es lo mismo, ya que están apuntando a los mismos objetos en memoria.
		// como deep corte brasilero compra solo con reales, va a modificar a sus objetos y ni cabida con la gilada superficial.
	}
}
